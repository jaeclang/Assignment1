---
title: "Assignment"
format: html
editor: visual
author: 
- IAN LIM 2101230
- LIM WEI JIE 2101242
- NEO KAH SIAK 2101960
- Loo Xian Hui 2102604
- Jaden Edwin Chua 1802965
---

# Introduction

```{r}
#| label: required-packages
#| message: false

library(tidyverse)
```

# Aggregating Information About Flights

## Unzip Data and Import all Extracted CSV Files

unzip(zip_file_path)

```{r}
#| label: unzip-and-import

airlines <- read.csv("airlines.csv")
airports <- read.csv("airports.csv")
flights <- read.csv("flights.csv")
planes <- read.csv("planes.csv")
weather <- read.csv("weather.csv")
```

### 2.2 Rankings of New York City's Main Airports by Number of Destinations Served

```{r}
#| label: rank-by-airports-served

flights |>
  distinct(origin, dest) |>
  count(origin, name = "n_dest") |>
  left_join(airports, join_by(origin == faa)) |>
  mutate(rank = min_rank(desc(n_dest))) |>
  select(origin, name, n_dest, rank) |>
  arrange(rank,origin)
```

### 2.3 Top Ten Destinations Airports by Seats

```{r}
# Join flights with planes to get the seat data
flights_seats <- flights |>
  inner_join(planes, by = "tailnum") |>
  filter(origin %in% c("JFK", "LGA", "EWR"))  # Consider only NYC airports

# Calculate the total seats per destination
destination_seats <- flights_seats |>
  group_by(dest) |>
  summarize(total_seats = sum(seats), .groups = "drop") |>
  left_join(airports, by = c("dest" = "faa")) |>
  arrange(desc(total_seats), dest) |>
  mutate(rank = dense_rank(desc(total_seats))) |>
  filter(rank <= 10) |>
  select(dest, name, total_seats, rank) |>
  arrange(rank, dest)

print(destination_seats, n = Inf)
```

### 2.4 Count the number of flights from each NYC airport to each destination

```{r}
airport_dest_flights <- flights |>
  filter(origin %in% c("JFK", "LGA", "EWR")) |>
  group_by(origin, dest) |>
  summarize(num_flights = n(), .groups = "drop") |>
  left_join(airports, by = c("origin" = "faa")) |>
  left_join(airports, by = c("dest" = "faa"), suffix = c(".origin", ".dest")) |>
  group_by(origin) |>
  mutate(rank = dense_rank(desc(num_flights))) |>
  filter(rank <= 10) |>
  select(origin, name.origin, dest, name.dest, num_flights, rank) |>
  arrange(origin, rank, dest)

print(airport_dest_flights, n = Inf)
```

### 2.5 Rankings of New York Cityâ€™s Main Airports by Mean Departure Delay

```{r}
#| label: rank-by-airports-mean-departure-delay

mean_delay <- flights %>%
  filter(!is.na(dep_delay)) %>%
  group_by(origin) %>%
  summarise(mean_departure_delay = mean(dep_delay, na.rm = TRUE)) %>%
  left_join(airports, by = c("origin" = "faa")) %>%
  arrange(mean_departure_delay, origin) %>%
  mutate(rank = rank(mean_departure_delay))

mean_delay %>%
  select(origin, name, mean_departure_delay, rank)
```

### 2.6 Percentage of On-Time Flights Despite Departure Delay

```{r}
#| label: rank-by-on-time-flights

on_time_flights <- flights %>%
  filter(dep_delay >= 30 & arr_delay <= 0) %>%
  summarise(Percentage = n() / nrow(flights) * 100)

print(on_time_flights)

```

### 2.7 On-Time Departure Percentage by Hour of the Day

```{r}
hourly_departures <- flights %>%
  filter(!is.na(dep_delay)) %>%
  mutate(OnTimeDeparture = dep_delay <= 0) %>%
  group_by(hour) %>%
  summarise(PercentageOnTime = mean(OnTimeDeparture) * 100) %>%
  arrange(hour)

print(hourly_departures)
```

### 2.8 Planes Operated by Multiple Airlines

```{r}
planes_multiple_airlines <- flights %>%
  select(tailnum, carrier) %>%
  distinct() %>%
  group_by(tailnum) %>%
  summarise(num_airlines = n_distinct(carrier)) %>%
  filter(num_airlines > 1) %>%
  left_join(planes, by = "tailnum") %>%
  select(tailnum, manufacturer, model, num_airlines) %>%
  arrange(tailnum)
```

#### Display the result

```{r}
planes_multiple_airlines
```

### 3.1 Identify Chicago Airports

```{r}
chicago_airports <- airports %>%
  filter(str_detect(name, "Chicago")) %>%
  select(faa, name)
```

# Display the content of chicago_airports

```{r}
print(chicago_airports)
```

### 3.2 Airlines Serving Chicago from New York City

```{r}
airlines_serving_chicago <- flights %>%
  filter(origin %in% c("JFK", "LGA", "EWR"), dest == "ORD") %>%
  group_by(carrier) %>%
  summarise(num_flights = n()) %>%
  left_join(airlines, by = c("carrier" = "carrier")) %>%
  arrange(desc(num_flights), carrier) %>%
  select(carrier, name, num_flights) %>%
  mutate(rank = row_number())
```

# Display the result

```{r}
print(airlines_serving_chicago)
```

### 3.3 On-Time Arrival Percentages by Airline

```{r}
# Ensure complete cases for delay fields
flights <- flights %>%
  filter(!is.na(dep_delay) & !is.na(arr_delay))

# Process the data to calculate on-time percentages
top_airlines_on_time <- flights %>%
  # Join with airports for origin
  left_join(airports, by = c("origin" = "faa")) %>%
  rename(origin_tzone = tzone) %>%
  filter(grepl("New_York", origin_tzone, ignore.case = TRUE)) %>%
  # Join with airports for destination
  left_join(airports, by = c("dest" = "faa")) %>%
  rename(dest_tzone = tzone) %>%
  filter(grepl("Chicago", dest_tzone, ignore.case = TRUE)) %>%
  # Group by carrier
  group_by(carrier) %>%
  summarise(
    total_flights = n(),
    on_time_flights = sum(dep_delay <= 0 & arr_delay <= 0),
    .groups = 'drop'
  ) %>%
  # Calculate on-time arrival percentage
  mutate(on_time_percentage = ifelse(total_flights > 0, (on_time_flights / total_flights) * 100, NA_real_)) %>%
  # Filter carriers with at least 100 flights
  filter(total_flights >= 100) %>%
  # Join with airlines to get names
  left_join(airlines, by = "carrier") %>%
  # Select needed columns
  select(carrier, name, on_time_percentage) %>%
  # Rank airlines based on on-time percentage
  mutate(rank = rank(-on_time_percentage)) %>%
  # Sort by rank and then by carrier for top 10
  arrange(rank, carrier)

print(top_airlines_on_time)
```

### 3.4 Top Ten Models by Frequency

```{r}
#! label: top-ten-models-by-frequency
# Define a more dynamic filtering approach using the airports data
top_manufacturer_model <- flights %>%
  # Join with airports to filter for New York origins based on timezone description
  left_join(airports, by = c("origin" = "faa")) %>%
  filter(grepl("New_York", tzone, ignore.case = TRUE)) %>%
  select(-name, -lat, -lon, -alt, -tz, -dst, -tzone) %>%  # Remove airport columns not needed
  # Join with airports to filter for Chicago destinations based on timezone description
  left_join(airports, by = c("dest" = "faa")) %>%
  filter(grepl("Chicago", tzone, ignore.case = TRUE)) %>%
  select(-name, -lat, -lon, -alt, -tz, -dst, -tzone) %>%
  # Join with planes data to access manufacturer and model
  left_join(planes, by = "tailnum") %>%
  # Group by manufacturer and model, count flights
  group_by(manufacturer, model) %>%
  summarise(number_of_flights = n(), .groups = 'drop') %>%
  # Determine ranks, handle ties appropriately
  mutate(rank = dense_rank(desc(number_of_flights))) %>%
  # Filter to retain only top 10, including ties
  filter(rank <= 10) %>%
  # Sort by rank, then manufacturer, then model
  arrange(rank, manufacturer, model)

# View top model
print(top_manufacturer_model)
```

### 3.5 Top Ten Planes by Mean Speed

### 3.6

```{r}
library(readr)
library(lubridate)


# Process the data to check if there was a flight every day in October 2013 from NYC to Chicago
result_vector <- flights %>%
  # Join with airports for origin, filtering for New York based on timezone
  left_join(airports, by = c("origin" = "faa")) %>%
  rename(origin_tzone = tzone) %>%
  filter(grepl("New_York", origin_tzone, ignore.case = TRUE)) %>%
  # Join with airports for destination, filtering for Chicago based on timezone
  left_join(airports, by = c("dest" = "faa")) %>%
  rename(dest_tzone = tzone) %>%
  filter(grepl("Chicago", dest_tzone, ignore.case = TRUE)) %>%
  # Filter for October 2013
  filter(year == 2013, month == 10) %>%
  mutate(date = make_date(year, month, day)) %>%
  distinct(date) %>%
  summarise(all_days_covered = all(seq.Date(from = as.Date("2013-10-01"), 
                                            to = as.Date("2013-10-31"), 
                                            by = "day") %in% date)) %>%
  pull(all_days_covered)

# Print the result and confirm details
print(result_vector)
print(paste("Length of the vector:", length(result_vector)))
print(paste("Class of the vector:", class(result_vector)))
```

### 4.1 Airport-Hour Combinations Absent from the Weather Table

```{r}
#! label: 4.1 Airport-Hour Combinations Absent from the Weather Table

# Merge flights dataset with weather dataset based on origin airport and time_hour
merged_data <- merge(flights, weather, by = c("origin", "time_hour"), all.x = TRUE)

# Filter rows where weather data is NA
missing_weather <- merged_data[is.na(merged_data$temp), ]

# Count unique combinations of origin airport and time_hour
unique_combinations <- nrow(unique(missing_weather[c("origin", "time_hour")]))

# Print the result
print(unique_combinations)

```

### 4.2 On-Time Departures by Airport and Precipitation

```{r}
#! label: 4.2 On-Time Departures by Airport and Precipitation
# Join flights with airports and weather data
flights_joined <- flights %>%
  inner_join(airports, by = c("origin" = "faa")) %>%
  inner_join(weather, by = c("origin", "year", "month", "day", "hour"))

# Filter out rows with unknown delay or precipitation
flights_filtered <- flights_joined %>%
  filter(!is.na(dep_delay) & !is.na(precip))

# Define function to determine if it's dry
is_dry <- function(precip) precip == 0

# Calculate percentage of on-time departures under dry and wet conditions
ontime_percentages <- flights_filtered %>%
  group_by(origin, name, is_dry = is_dry(precip)) %>%
  summarize(ontime_percentage = mean(dep_delay == 0) * 100) %>%
  arrange(origin, is_dry)

# Print the results
print(ontime_percentages)

```

### 4.3 Rank Airports by Low-Visibility Departure Delays

```{r}
#! label: 4.3 Rank Airports by Low-Visibility Departure Delays


# Join flights with airports and weather data
flights_joined <- flights %>%
  inner_join(airports, by = c("origin" = "faa")) %>%
  inner_join(weather, by = c("origin", "year", "month", "day", "hour"))

# Filter out rows with unknown departure delays and visibility less than one mile
filtered_flights <- flights_joined %>%
  filter(!is.na(dep_delay), visib < 1)

# Calculate mean departure delay for each airport
airport_delays <- filtered_flights %>%
  group_by(origin, name) %>%
  summarize(mean_delay = mean(dep_delay, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(rank = rank(mean_delay))

# Sort the results by rank and then alphabetically by airport code
airport_delays <- airport_delays %>%
  arrange(rank, origin)

# Print the results
print(airport_delays)

```

### 4.4 Correlation between Temperature and Departure Delay

```{r}
#! label: 4.4 Correlation between Temperature and Departure Delay


# Join flights with weather data
flights_weather <- flights %>%
  inner_join(weather, by = c("origin", "year", "month", "day"))

# Filter out rows with unknown temperature or departure delay
filtered_data <- flights_weather %>%
  filter(!is.na(temp) & !is.na(dep_delay))

# Calculate the mean temperature and mean departure delay for each day
daily_means <- filtered_data %>%
  group_by(year, month, day) %>%
  summarize(mean_temp = mean(temp), mean_dep_delay = mean(dep_delay))

# Compute the correlation coefficient
correlation_coefficient <- cor(daily_means$mean_temp, daily_means$mean_dep_delay)

# Convert the correlation coefficient to a single-element numeric vector
correlation_coefficient_vector <- as.numeric(correlation_coefficient)

# Confirm the length and class of the result
print(correlation_coefficient_vector)

```

------------------------------------------------------------------------
